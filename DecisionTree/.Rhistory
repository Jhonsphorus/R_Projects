#Loading libraries
library(rpart,quietly = TRUE)
library(caret,quietly = TRUE)
library(rpart.plot,quietly = TRUE)
library(rattle)
install.packages("rattle")
#Loading libraries
library(rpart,quietly = TRUE)
library(caret,quietly = TRUE)
library(rpart.plot,quietly = TRUE)
library(rattle)
#Loading libraries
library(rpart,quietly = TRUE)
library(caret,quietly = TRUE)
library(rpart.plot,quietly = TRUE)
library(rattle)
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
View(mushrooms)
# Structure of the dataset
str(mushrooms)
ncol(mushrooms)
nrow(mushrooms)
# Checking for Null values
sapply(mushrooms, function(x) sum(is.na(x)) )
# deleting redundant variable `veil.type`
mushrooms$veil.type <- NULL
# checking if the feature veil.type has being removed
str(mushrooms)
# checking if the feature veil.type has being removed
# str(mushrooms) # The number of variables has reduced to 22 from 23
#Loading libraries
library(rpart,quietly = TRUE)
library(caret,quietly = TRUE)
library(rpart.plot,quietly = TRUE)
library(rattle)
#Loading libraries
library(rpart,quietly = TRUE)
library(caret,quietly = TRUE)
library(rpart.plot,quietly = TRUE)
library(rattle)
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
View(mushrooms)
ncol(mushrooms)
nrow(mushrooms)
# Checking for Null values
sapply(mushrooms, function(x) sum(is.na(x)) )
# deleting redundant variable `veil.type`
mushrooms$veil.type <- NULL
# checking if the feature veil.type has being removed
str(mushrooms) # The number of variables has reduced to 22 from 23
# checking if the feature veil.type has being removed
#str(mushrooms) # The number of variables has reduced to 22 from 23
# analyzing the odor variable
table(mushrooms$class,mushrooms$odor)
# analyzing the odor variable
table(mushrooms$class,mushrooms$habitat)
# analyzing the odor variable
table(mushrooms$class,mushrooms$cap.shape)
cor(mushrooms$class,mushrooms$cap.shape)
number.perfect.splits <- apply(X=mushrooms[-1], MARGIN = 2, FUN = function(col){
t <- table(mushrooms$class,col)
sum(t == 0)
})
# Descending order of perfect splits
order <- order(number.perfect.splits,decreasing = TRUE)
number.perfect.splits <- number.perfect.splits[order]
# Plot graph
par(mar=c(10,2,2,2))
barplot(number.perfect.splits,
main="Number of perfect splits vs feature",
xlab="",ylab="Feature",las=2,col="wheat")
number.perfect.splits <- apply(X=mushrooms[-1], MARGIN = 2, function(col){
t <- table(mushrooms$class,col)
sum(t == 0)
})
# Descending order of perfect splits
order <- order(number.perfect.splits,decreasing = TRUE)
number.perfect.splits <- number.perfect.splits[order]
# Plot graph
par(mar=c(10,2,2,2))
barplot(number.perfect.splits,
main="Number of perfect splits vs feature",
xlab="",ylab="Feature",las=2,col="wheat")
number.perfect.splits <- apply(X=mushrooms[-1], MARGIN = 2, FUN = function(col){
t <- table(mushrooms$class,col)
sum(t == 0)
})
# Descending order of perfect splits
order <- order(number.perfect.splits,decreasing = TRUE)
number.perfect.splits <- number.perfect.splits[order]
# Plot graph
par(mar=c(10,2,2,2))
barplot(number.perfect.splits,
main="Number of perfect splits vs feature",
xlab="",ylab="Feature",las=2,col="wheat")
#data splicing
set.seed(12345)
train <- sample(1:nrow(mushrooms),size = ceiling(0.80*nrow(mushrooms)),replace = FALSE)
# training set
mushrooms_train <- mushrooms[train,]
# test set
mushrooms_test <- mushrooms[-train,]
# penalty matrix
penalty.matrix <- matrix(c(0,1,10,0), byrow=TRUE, nrow=2)
# building the classification tree with rpart
tree <- rpart(class~., data=mushrooms_train,parms = list(loss = penalty.matrix),
method = "class")
# Visualize the decision tree with rpart.plot
rpart.plot(tree, nn=TRUE)
#Testing the model
pred <- predict(object=tree,mushrooms_test[-1],type="class")
#Calculating accuracy
t <- table(mushrooms_test$class,pred)
confusionMatrix(t)
#Loading libraries
library(rpart)
library(caret)
library(rsample)
#Loading libraries
library(rpart)
library(caret)
library(rsample)
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
str(mushrooms)
nrow(mushrooms)
ncol(mushrooms)
sapply(mushrooms, function(x) {sum(is.na(x)) })
train_test <- initial_split(mushrooms, p=0.8)
train_test <- initial_split(mushrooms, p=0.8)
train_mushroom <- training(train_test)
test_mushroom <- testing(train_test)
train_test
#train_test
train_mushroom
set.seed(100)
train_test <- initial_split(mushrooms, p=0.8)
train_mushroom <- training(train_test)
test_mushroom <- testing(train_test)
library(DT)
?DT
names(getModelInfo())
DT_model <- train(class~.,data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
control <- trainControl(method ="repeatedcv",number =10, repeats =3)
DT_model <- train(class~.,data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
control <- trainControl(method ="repeatedcv",number =10, repeats =3)
DT_model <- train(class~.,data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
DT_model <- train(class~.,data=train_mushroom,method="ctree",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
DT_mod <- rpart(class~., data=train_mushroom)
#Loading libraries
library(rpart)
library(caret)
library(rsample)
library(rpart.plot,quietly = TRUE)
rpart.plot(DT_mod)
rpart.plot(DT_mod, extra = 2)
rpart.plot(DT_mod, extra = 3)
pred <- predict(DT_mod,test_mushroom)
tab <- table(pred,test_mushroom$class)
pred <- predict(DT_mod,test_mushroom)
tab <- table(pred,test_mushroom$class)
confusionMatrix(pred,test_mushroom$class)
DT_mod <- rpart(class~., data=train_mushroom)
rpart.plot(DT_mod, extra = 3)
pred <- predict(DT_mod,test_mushroom)
pred <- predict(DT_mod,test_mushroom)
View(pred)
confusionMatrix(pred,test_mushroom$class)
pred <- predict(DT_mod)
confusionMatrix(pred,test_mushroom$class)
DT_mod <- rpart(class~., data=train_mushroom)
rpart.plot(DT_mod, extra = 3)
pred <- predict(DT_mod,test_mushroom)
confusionMatrix(pred,test_mushroom$class)
table(pred,test_mushroom$class)
dct<- train(form=class~., data=train_mushroom,method="rpart", metric="Accuracy",preProcess = c("center", "scale"),trControl=control, tuneLength = 5)
levels(mushrooms$class)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
model <- train(class~., data=train_mushroom, method="lvq", preProcess="scale", trControl=control)
DT_model <- train(class~.,data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
control <- trainControl(method="repeatedcv", number=10, repeats=3)
model <- train(class~., data=train_mushroom, method="lvq", preProcess="scale", trControl=control)
#Loading libraries
library(rpart)
library(caret)
library(rsample)
library(rpart.plot,quietly = TRUE)
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
colnames(mushrooms)
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
colnames(mushrooms$class) <- "target"
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
colnames(mushrooms$class) <- c("target")
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
mushrooms$class <- "target"
str(mushrooms)
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
#mushrooms$class <- "target"
str(mushrooms)
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
mushrooms$class <- "target"
str(mushrooms)
#Loading libraries
library(rpart)
library(caret)
library(rsample)
library(rpart.plot,quietly = TRUE)
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
#mushrooms$class <- "target"
sapply(mushrooms, function(x) {sum(is.na(x)) })
set.seed(100)
train_test <- initial_split(mushrooms, p=0.8)
train_mushroom <- training(train_test)
test_mushroom <- testing(train_test)
control <- trainControl(method ="repeatedcv",number =10, repeats =3)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
model <- train(class~., data=train_mushroom, method="lvq", preProcess="scale", trControl=control)
DT_model <- train(class~.,data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
DT_model <- train(class~.,data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
DT_model <- train(class~cap.shape+habitat,data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
pred <- predict(DT_model,test_mushroom)
pred <- predict(DT_model,test_mushroom)
table(pred,test_mushroom$class)
DT_model <- train(class~.,data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
DT_model <- train(class~ .,data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
DT_model <- train(class ~ .,data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
DT_model <- train(class~., data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
DT_model <- train(class~ ., data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
DT_model <- train(class ~ ., data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10 )
DT_model <- train(class ~ ., data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=5 )
#Loading libraries
library(rpart)
library(caret)
library(rsample)
library(rpart.plot,quietly = TRUE)
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
#mushrooms$class <- "target"
str(mushrooms)
str(mushrooms)
nrow(mushrooms)
ncol(mushrooms)
sapply(mushrooms, function(x) {sum(is.na(x)) })
mushrooms$veil.type <- NULL
str(mushrooms)
control <- trainControl(method ="repeatedcv",number =10, repeats =3)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
model <- train(class~., data=train_mushroom, method="lvq", preProcess="scale", trControl=control)
#Loading libraries
library(rpart)
library(caret)
library(rsample)
library(rpart.plot,quietly = TRUE)
mushrooms <- read.csv("mushrooms.csv", header = TRUE)
#mushrooms$class <- "target"
str(mushrooms)
nrow(mushrooms)
ncol(mushrooms)
sapply(mushrooms, function(x) {sum(is.na(x)) })
mushrooms$veil.type <- NULL
str(mushrooms)
set.seed(100)
train_test <- initial_split(mushrooms, p=0.8)
train_mushroom <- training(train_test)
test_mushroom <- testing(train_test)
control <- trainControl(method ="repeatedcv",number =10, repeats =3)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
model <- train(class~., data=train_mushroom, method="lvq", preProcess="scale", trControl=control)
DT_model <- train(class ~ ., data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=5 )
pred <- predict(DT_model,test_mushroom)
table(pred,test_mushroom$class)
DT_model <- train(class ~ ., data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=10)
pred <- predict(DT_model,test_mushroom)
table(pred,test_mushroom$class)
DT_model <- train(class ~ ., data=train_mushroom,method="rpart",preProcess=c("center","scale"),trControl=control,tuneLength=20)
pred <- predict(DT_model,test_mushroom)
table(pred,test_mushroom$class)
dct<- train(form=class~., data=train_mushroom,method="rpart", metric="Accuracy",preProcess = c("center", "scale"),trControl=control, tuneLength = 5)
pred <- predict(dct,test_mushroom)
table(pred,test_mushroom$class)
dct<- train(form=class~., data=train_mushroom,method="rpart", metric="Accuracy",preProcess = c("center", "scale"),trControl=control, tuneLength = 20)
pred <- predict(dct,test_mushroom)
table(pred,test_mushroom$class)
confusionMatrix(table(pred,test_mushroom$class))
DT_mod <- rpart(class~., data=train_mushroom)
rpart.plot(DT_mod, extra = 3)
pred <- predict(DT_mod,test_mushroom)
table(pred,test_mushroom$class)
rpart.plot(dct)
rpart.plot(dct)
rpart.plot(DT_model)
# analyzing the odor variable
table(mushrooms$class,mushrooms$odor)
pred <- predict(DT_model,test_mushroom)
actual_predicted <- data.frame(test_mushroom$class,pred)
colnames(actual_predicted) <- c("Actual_class","Predicted_class")
View(actual_predicted)
table(pred,test_mushroom$class)
confusionMatrix(table(pred,test_mushroom$class))
pred <- predict(DT_model,test_mushroom[,-1])
actual_predicted <- data.frame(test_mushroom$class,pred)
colnames(actual_predicted) <- c("Actual_class","Predicted_class")
View(actual_predicted)
table(pred,test_mushroom$class)
actual_predicted <- data.frame(test_mushroom$class,pred)
colnames(actual_predicted) <- c("Actual_class","Predicted_class")
View(actual_predicted)
table(pred,test_mushroom$class)
pred <- predict(DT_model,test_mushroom[,-2])
pred <- predict(DT_model,test_mushroom[,-1])
actual_predicted <- data.frame(test_mushroom$class,pred)
colnames(actual_predicted) <- c("Actual_class","Predicted_class")
View(actual_predicted)
table(pred,test_mushroom$class)
# pred <- predict(DT_model,test_mushroom[,-1]) # I'm removing the column of the response variable so that the model does not see the column while predicting
pred <- predict(DT_model,test_mushroom)
actual_predicted <- data.frame(test_mushroom$class,pred)
colnames(actual_predicted) <- c("Actual_class","Predicted_class")
View(actual_predicted)
table(pred,test_mushroom$class)
confusionMatrix(table(pred,test_mushroom$class))
# analyzing the odor variable
sapply(mushrooms, function(x) {
table(mushrooms$class,mushrooms$odor)
})
# analyzing the odor variable
sapply(mushrooms, function(x) {
table(mushrooms$class,mushrooms$x)
})
# analyzing the odor variable
sapply(mushrooms, function(x) {
table(mushrooms$class,col(mushrooms))
})
# analyzing the odor variable
sapply(mushrooms, function(x) {
for(i in ncol(mushrooms)){
table(mushrooms$class,mushrooms$i)
}
})
# analyzing the odor variable
sapply(mushrooms, function(x) {
for(i in ncol(mushrooms)){
table(mushrooms$class,mushrooms[,i])
}
})
# analyzing the odor variable
sapply(mushrooms, function(x) {
for(i in ncol(mushrooms)){
table(mushrooms$class,mushrooms[i])
}
})
# analyzing the odor variable
sapply(mushrooms, function(x) {
for(i in ncol(mushrooms)){
table(mushrooms[1],mushrooms[i])
}
})
# analyzing the odor variable
sapply(mushrooms, function(x) {
for(i in ncol(mushrooms)){
table(mushrooms$class,mushrooms$colnames(i) )
}
})
# analyzing the odor variable
table(mushrooms$class,mushrooms$odor:mushrooms$habitat)
# analyzing the odor variable
table(mushrooms$class,mushrooms$odor)
table(mushrooms$class,mushrooms$habitat)
# analyzing the odor variable
table(mushrooms$class,mushrooms$odor)
table(mushrooms$class,mushrooms$habitat)
table(mushrooms$class,mushrooms$population)
# analyzing the odor variable
table(mushrooms$class,mushrooms$odor)
table(mushrooms$class,mushrooms$habitat)
table(mushrooms$class,mushrooms$population)
table(mushrooms$class,mushrooms$veil.color)
install.packages("automl")
install.packages("auto")
install.packages("auto.pca")
library(auto.pca)
?auto.pca
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
library(tidym)
#Loading libraries
library(rpart)
library(caret)
library(rsample)
install.packages("tidyr")
#Loading libraries
library(rpart)
library(caret)
library(rsample)
#Loading libraries
library(rpart)
library(caret)
library(rsample)
#Loading libraries
library(rpart)
library(caret)
#library(rsample)
library(rpart.plot,quietly = TRUE)
#Loading libraries
library(rpart)
library(caret)
#library(rsample)
library(tidyr)
#Loading libraries
library(rpart)
library(caret)
#library(rsample)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyr)
library(tidyverse)
remotes::update_packages("rlang")
remotes::update_packages("rlang")
library(rlang)
remove.packages("rlang", lib="~/R/win-library/3.6")
install.packages("rlang")
library(rlang)
install.packages("rlang")
install.packages("rlang")
library(rlang)
#Loading libraries
library(rpart)
library(caret)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(generics)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
library(party)
library(rlang)
library(abind)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
remove.packages("ggplot2", lib="~/R/win-library/3.6")
install.packages("rlang")
library(rlang)
?rlang
??rlang
install.packages("tidyverse")
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyverse)
#Loading libraries
library(rpart)
library(caret)
library(ggplot2)
library(forcats)
library(dplyr)
library(tidyr)
#Loading libraries
library(rpart)
library(caret)
library(rsample)
library(rpart.plot,quietly = TRUE)
