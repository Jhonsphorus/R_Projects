{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"train(class ~ ., data = train_mushroom, method = \"lvq\", preProcess = \"scale\", \n    trControl = control)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"train.formula(class ~ ., data = train_mushroom, method = \"lvq\", \n    preProcess = \"scale\", trControl = control)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"train(x, y, weights = w, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"train.default(x, y, weights = w, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, \n    method = models, ppOpts = preProcess, ctrl = trControl, lev = classLevels, \n    ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"foreach(iter = seq(along = resampleIndex), .combine = \"c\", .verbose = FALSE, \n    .export = export, .packages = \"caret\") %:% foreach(parm = 1L:nrow(info$loop), \n    .combine = \"c\", .verbose = FALSE, .export = export, .packages = \"caret\") %op% \n    { ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"e$fun(obj, substitute(ex), parent.frame(), e$data)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch({\n    repeat {\n        args <- nextElem(it)\n        if (obj$verbose) { ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(eval(xpr, envir = envir), error = function(e) e)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(xpr, envir = envir)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(xpr, envir = envir)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"try(createModel(x = subset_x(x, modelIndex), y = y[modelIndex], \n    wts = wts[modelIndex], method = method, tuneValue = info$loop[parm, \n        , drop = FALSE], obsLevels = lev, pp = ppp, classProbs = ctrl$classProbs, \n    sampling = ctrl$sampling, ...), silent = TRUE)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(expr, error = function(e) {\n    call <- conditionCall(e)\n    if (!is.null(call)) {\n        if (identical(call[[1L]], quote(doTryCatch)))  ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"createModel(x = subset_x(x, modelIndex), y = y[modelIndex], wts = wts[modelIndex], \n    method = method, tuneValue = info$loop[parm, , drop = FALSE], \n    obsLevels = lev, pp = ppp, classProbs = ctrl$classProbs, \n    sampling = ctrl$sampling, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"method$fit(x = x, y = y, wts = wts, param = tuneValue, lev = obsLevels, \n    last = last, classProbs = classProbs, ...)","line_number":0},{"character_number":21,"end_character_number":128,"end_line_number":26,"file":"lvq.R","func":"class::lvq3(x, y, class::lvqinit(x, y, size = param$size, k = min(param$k, \n    nrow(x) - length(levels(y)))), ...)","line_number":26},{"character_number":21,"end_character_number":128,"end_line_number":26,"file":"lvq.R","func":"class::lvqinit(x, y, size = param$size, k = min(param$k, nrow(x) - \n    length(levels(y))))","line_number":26}],"message":"StopIteration"}