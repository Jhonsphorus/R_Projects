data("cars")
data("cars")
head(cars)
str(cars)
scatter.smooth(x=cars$speed, y = cars$dist, main="Dist ~ Speed")
scatter.smooth(x=cars$speed, y = cars$dist, xlab ="Speed",ylab ="Distance", main="Scatter Plot of Distance against Speed")
?cars
plot(x=cars$speed, y = cars$dist, xlab ="Speed",ylab ="Distance", main="Scatter Plot of Distance against Speed")
scatter.smooth(x=cars$speed, y = cars$dist, xlab ="Speed",ylab ="Distance", main="Scatter Plot of Distance against Speed")
cor(cars$speed, cars$dist) #Finding Correlation between speed and distance
# fitted linear model, dist-dependent variable, speed-independent variable
linear_model <- lm(dist~speed, data = cars)
# fitted linear model, dist-dependent variable, speed-independent variable
linear_model <- lm(dist~speed, data = cars)
summary(linear_model)
?lm
# fitted linear model, dist-dependent variable, speed-independent variable
linear_model <- lm(dist~speed, data = cars)
#summary(linear_model)
print(linear_model)
# fitted linear model, dist-dependent variable, speed-independent variable
linear_model <- lm(dist~speed, data = cars)
summary(linear_model)
print(linear_model)
# fitted linear model, dist-dependent variable, speed-independent variable
linear_model <- lm(dist~speed, data = cars)
#summary(linear_model)
print(linear_model)
summary(linear_model)
linear_model$coefficients
Model_Summary <- summary(linear_model)
Model_Coefficients <- Model_Summary$coefficients
std_error <- Model_Coefficients["speed", "Std. Error"]
print(std_error)
(Model_Summary$coefficients)
Model_Coefficients["speed","t value"]
f_stat <- summary(linear_model)$fstatistic
f_stat
linear_model$coefficients
(Model_Summary$coefficients)
t1 <- summary(linear_model)$coefficients
t1 <- summary(linear_model)$coefficients
t1
t1 <- summary(linear_model)$coefficients$Std. Error
t1 <- summary(linear_model)$coefficients
t1
?nls
?glm
data("cars")
head(cars)
str(cars)
scatter.smooth(x=cars$speed, y = cars$dist, xlab ="Speed",ylab ="Distance", main="Scatter Plot of Distance against Speed")
cor(cars$speed, cars$dist) #Finding Correlation between speed and distance
# fitted linear model, dist-dependent variable, speed-independent variable
linear_model <- lm(dist~speed, data = cars)
#summary(linear_model)
print(linear_model)
summary(linear_model)
Model_Summary <- summary(linear_model)
Model_Coefficients <- Model_Summary$coefficients
std_error <- Model_Coefficients["speed", "Std. Error"]
print(std_error)
f_stat <- summary(linear_model)$fstatistic
f_stat
(Model_Summary$coefficients)
Model_Coefficients["speed","t value"]
t1 <- summary(linear_model)$coefficients
t1
knit_with_parameters('~/RProject/Personal_Practice_New/LinearRegression/LinearRegression.Rmd', encoding = 'UTF-8')
data("cars")
head(cars)
str(cars)
data("cars")
View(cars)
lm_pred <- predict(linear_model, cars)
lm_pred <- predict(linear_model, cars)
df_lm <- data.frame(cars$dist,lm_pred)
View(df_lm)
# Create the predictor and response variable.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
# Give the chart file a name.
png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
dev.off()
# Give the chart file a name.
png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 4,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.5,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.5,pch = 20,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.5,pch = 30,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.5,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.5,pch = 1,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.5,pch = 2,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.5,pch = 4,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.5,pch = 5,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.5,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(relation),cex = 1.5,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.5,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
jpgg(file = "linearregression2.jpg")
# Give the chart file a name.
jpg(file = "linearregression2.jpg")
library(png)
# Create the predictor and response variable.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
z <- data.frame(x,y)
writePNG(z)
# Give the chart file a name.
png(file = "linearregression2.jpg")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.5,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
dev.off()
relation
summary(relation)
# Find weight of a person with height 170.
newdata1 <- data.frame(x = 170)
result <-  predict(relation,newdata1)
print(result)
# Find weight of a person with height 170.
newdata1 <- data.frame(x = 180)
result <-  predict(relation,newdata1)
print(result)
# Create the predictor and response variable.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131) # height
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48) # Weight
#z <- data.frame(x,y)
relation <- lm(y~x)
relation
# Give the chart file a name.
#png(file = "linearregression2.png")
#png(file = "linearregression2.jpg")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.5,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
#relation
summary(relation)
# Find weight of a person with height 180.
newdata1 <- data.frame(x = 180)
result <-  predict(relation,newdata1)
print(result)
relation$residuals
relation$residuals
data("mtcars")
input <- mtcars[,c("mpg","disp","hp","wt")]
print(head(input))
mtcars
# Create the relationship model.
model <- lm(mpg~disp+hp+wt, data = input)
#model <- lm(mpg~., data = input)
# Create the relationship model.
model1 <- lm(mpg~disp+hp+wt, data = input)
#model <- lm(mpg~., data = input)
model1
# Show the model.
print(model)
# Get the Intercept and coefficients as vector elements.
cat("# # # # The Coefficient Values # # # ","\n")
a <- coef(model)[1]
print(a)
Xdisp <- coef(model)[2]
Xhp <- coef(model)[3]
Xwt <- coef(model)[4]
print(Xdisp)
print(Xhp)
print(Xwt)
coef(model1)
# Show the model.
print(model1)
# Get the Intercept and coefficients as vector elements.
cat("# # # # The Coefficient Values # # # ","\n")
a <- coef(model)[1]
print(a)
Xdisp <- coef(model)[2]
Xhp <- coef(model)[3]
Xwt <- coef(model)[4]
print(Xdisp)
print(Xhp)
print(Xwt)
# Show the model.
#print(model1)
test1 <- data.frame(c(221),c(102),c(2.91))
test1
input
disp <- c(221)
hp <- c(102)
wt <- c(2.91)
test1 <- data.frame(disp,hp,wt)
test1
disp <- c(221)
hp <- c(102)
wt <- c(2.91)
test1 <- data.frame(disp,hp,wt)
pred1 <- predict(model1, test1)
pred1
scatter.smooth(x,y, main = "Height Vs Weight Regression")
scatter.smooth(y,x, main = "Height Vs Weight Regression")
# Create the predictor and response variable.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131) # height
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48) # Weight
#z <- data.frame(x,y)
relation <- lm(y~x)
relation
# Give the chart file a name.
#png(file = "linearregression2.png")
#png(file = "linearregression2.jpg")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.5,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
scatter.smooth(y = y,x=x, main = "Height Vs Weight Regression")
# Give the chart file a name.
#png(file = "linearregression2.png")
#png(file = "linearregression2.jpg")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(y~x)),cex = 1.5,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression2.png")
#png(file = "linearregression2.jpg")
# Plot the chart.
plot(y =y,x = x,col = "blue",main = "Height & Weight Regression",
abline(lm(y~x)),cex = 1.5,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "linearregression2.png")
#png(file = "linearregression2.jpg")
# Plot the chart.
plot(y =y,x = x,col = "blue",main = "Height & Weight Regression",
abline(lm(y~x)),cex = 1.5,pch = 16,ylab = "Weight in Kg",xlab = "Height in cm")
# Save the file.
#dev.off()
scatter.smooth(y = y,x=x, main = "Height Vs Weight Regression")
# Create the relationship model.
model1 <- lm(mpg~disp+hp+wt, data = input)
#model <- lm(mpg~., data = input)
model1
pred1 <- predict(model1, test1)
pred1
summary(model1)
modelCoef <- summary(model1)
modelCoef$df
modelCoef$r.squared
modelCoef$terms
modelCoef$residuals
modelCoef$coefficients
AIC(model1)
AIC(model1)
BIC(model1)
AIC(model1)
BIC(model1)
modelCoef <- summary(model1)
modelSummary <- summary(model1)
#modelCoef <- modelSummary$
modelCoef
modelSummary <- summary(model1)
modelCoef <- modelSummary$coefficients
modelCoef
dispCoef <- modelCoef["disp","Estimate"]
dispCoef <- modelCoef["disp","Estimate"]
didpCoef
dispCoef
dispCoef <- modelCoef["disp","Estimate"]
hpCoef <- modelCoef["hp","Estimate"]
wtCoef <- modelCoef["wt","Estimate"]
dispCoef
hpCoef
wtCoef
library(datasets)
cars1 <- cars
cars1
head(cars1)
scatter.smooth(x=cars1$speed, y=cars1$dist, main = "Plot of Distance Vs Speed")
?cars
scatter.smooth(x=cars1$speed, y=cars1$dist, main = "Plot of Distance Vs Speed", ylab ="Stopping Distance", xlab ="Speed")
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(cars$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars$speed)$out))  # box plot for 'speed'
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))  # box plot for 'distance'
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(cars1$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars1$speed)$out))  # box plot for 'speed'
boxplot(cars1$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars1$dist)$out))  # box plot for 'distance'
boxplot.stats(cars1$speed)$out
boxplot(cars1$speed, main="Speed")
boxplot(cars1$speed, main="Speed")$out
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(cars1$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars1$speed)$int))  # box plot for 'speed'
boxplot(cars1$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars1$dist)$out))  # box plot for 'distance'
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(cars1$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars1$speed)$max))  # box plot for 'speed'
boxplot(cars1$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars1$dist)$out))  # box plot for 'distance'
?boxplot.stats
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(cars1$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars1$speed)$conf))  # box plot for 'speed'
boxplot(cars1$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars1$dist)$out))  # box plot for 'distance'
boxplot(cars1$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars1$speed)$conf))
boxplot.stats(cars1$speed)$conf)
boxplot.stats(cars1$speed)$conf
boxplot.stats(cars1$speed)$n
boxplot.stats(cars1$speed)$out
boxplot.stats(cars1$dist)$out
par(mfrow=c(1, 2))  # divide graph area in 2 columns
boxplot(cars1$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars1$speed)$out))  # box plot for 'speed'
boxplot(cars1$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars1$dist)$out))  # box plot for 'distance'
library(e1071)
par(mfrow=c(1, 2))  # divide graph area in 2 columns
plot(density(cars$speed), main="Density Plot: Speed", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$speed), 2)))  # density plot for 'speed'
polygon(density(cars$speed), col="red")
plot(density(cars$dist), main="Density Plot: Distance", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$dist), 2)))  # density plot for 'dist'
polygon(density(cars$dist), col="red")
library(e1071)
par(mfrow=c(1, 2))  # divide graph area in 2 columns
plot(density(cars$speed), main="Density Plot: Speed", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$speed), 2)))  # density plot for 'speed'
polygon(density(cars$speed), col="red")
plot(density(cars$dist), main="Density Plot: Distance", ylab="Frequency", sub=paste("Skewness:", round(e1071::skewness(cars$dist), 2)))  # density plot for 'dist'
polygon(density(cars$dist), col="red")
# Create Training and Test data -
set.seed(100)  # setting seed to reproduce results of random sampling
trainingRowIndex <- sample(1:nrow(cars1), 0.8*nrow(cars1))  # row indices for training data
trainingData <- cars1[trainingRowIndex, ]  # model training data
testData  <- cars1[-trainingRowIndex, ]   # test data
# Build the model on training data -
lmMod <- lm(dist ~ speed, data=trainingData)  # build the model
distPred <- predict(lmMod, testData)  # predict distance
distPred
nrow(trainingData)
nrow(testData)
distPred
summary(lmMod)
actuals_preds <- data.frame(cbind(actuals=testData$dist, predicteds=distPred))  # make actuals_predicteds dataframe.
correlation_accuracy <- cor(actuals_preds)  # 82.7%
head(actuals_preds)
actuals_preds <- data.frame(cbind(actuals=testData$dist, predicteds=distPred))  # make actuals_predicteds dataframe.
correlation_accuracy <- cor(actuals_preds)  # 82.7%
correlation_accuracy
head(actuals_preds)
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
# => 58.42%, min_max accuracy
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
# => 48.38%, mean absolute percentage deviation
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
# => 58.42%, min_max accuracy
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
# => 48.38%, mean absolute percentage deviation
min_max_accuracy
mape
DMwR::regr.eval(actuals_preds$actuals, actuals_preds$predicteds)
cor(testData$dist~distPred)
cor(testData$dist,distPred)
cor(testData$dist, distPred)
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
# => 73.11%, min_max accuracy
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
# => 49.60%, mean absolute percentage deviation
min_max_accuracy
mape
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
# => 73.11%, min_max accuracy
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
# => 49.60%, mean absolute percentage deviation
mape2 <- (mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals))*100
min_max_accuracy
mape
mape2
DMwR::regr.eval(actuals_preds$actuals, actuals_preds$predicteds)
install.packages("DMwR")
DMwR::regr.eval(actuals_preds$actuals, actuals_preds$predicteds)
DMwR::regr.eval(actuals_preds$actuals, actuals_preds$predicteds)
