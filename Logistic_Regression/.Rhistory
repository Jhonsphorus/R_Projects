library(mlbench)
mlbench::BreastCancer
BreastCancer
data("BreastCancer")
BreastCancer
data("BreastCancer")
b_canc = BreastCancer[complete.cases(BreastCancer),]
b_canc = BreastCancer[complete.cases(BreastCancer),]
b_canc
data("BreastCancer")
View(BreastCancer)
sum(is.na(BreastCancer))
#sum(is.na(BreastCancer))
sapply(BreastCancer, function(x) sum(is.na(x)))
nrow(BreastCancer)
ncol(BreastCancer)
#sum(is.na(BreastCancer))
sapply(BreastCancer, function(x){sum(is.na(x))})
str(BreastCancer)
library(caret)
set.seed(10)
train_ratio <- createDataPartition
library(caret)
set.seed(10)
train_ratio <- createDataPartition(b_canc, p=0.7,list = FALSE)
library(caret)
set.seed(10)
train_ratio <- createDataPartition(b_canc, p=0.7,list = FALSE)
library(caret)
set.seed(10)
train_ratio <- createDataPartition(b_canc$Id, p=0.7,list = FALSE)
trainData <- b_canc[train_ratio,]
testData <- b_canc[-train_ratio,]
library(caret)
set.seed(10)
train_ratio <- createDataPartition(b_canc$Id, p=0.7,list = FALSE)
trainData <- b_canc[train_ratio,]
testData <- b_canc[-train_ratio,]
library(caret)
set.seed(10)
train_ratio <- createDataPartition(b_canc$Class, p=0.7,list = FALSE)
trainData <- b_canc[train_ratio,]
testData <- b_canc[-train_ratio,]
library(caret)
set.seed(10)
train_ratio <- createDataPartition(b_canc$Cl.thickness, p=0.7,list = FALSE)
trainData <- b_canc[train_ratio,]
testData <- b_canc[-train_ratio,]
library(caret)
set.seed(10)
train_ratio <- createDataPartition(b_canc$Class, p=0.7,list = FALSE)
trainData <- b_canc[train_ratio,]
testData <- b_canc[-train_ratio,]
library(rsample)
train_test <- initial_split(b_canc, p=0.7)
train_Data <- training(train_test)
test_Data <- testing(train_test)
library(rsample)
set.seed(100)
train_test <- initial_split(b_canc, p=0.7)
train_Data <- training(train_test)
test_Data <- testing(train_test)
?glm
logis <- glm(Class~Cell.shape,family ="Binomial" , data =trainData)
logis <- glm(Class~Cell.shape,family ="binomial" , data =trainData)
pred <- predict(logis,testData)
logisDf <- data.frame(testData$Class,pred)
View(logisDf)
summary(logis)
levels(BreastCancer$Cell.shape)
levels(testData$Cell.shape)
levels(testData$Class)
?train
control <- trainControl("repeatedcv",number = 10, repeats = 3)
logis2 <- train(Class~Cell.shape, method="glm",family="binomial",control=control,preProcess=c("center","scale"),tuneLength=5)
control <- trainControl("repeatedcv",number = 10, repeats = 3)
logis2 <- train(Class~Cell.shape,data=trainData, method="glm",family="binomial",control=control,preProcess=c("center","scale"),tuneLength=5)
control <- trainControl("repeatedcv",number = 10, repeats = 3)
logis2 <- train(Class~Cell.shape,data=trainData, method="glm",family="binomial",trControl=control,preProcess=c("center","scale"),tuneLength=5)
pred2 <- predict(logis,testData)
logisDf2 <- data.frame(testData$Class,pred2)
View(logisDf2)
confusionMatrix(pred2,testData$Class)
confusionMatrix(pred1,testData$Class)
tab <- table(pred1,testData$Class)
tab <- table(pred2,testData$Class)
tab <- table(pred2,testData$Class)
tab
table(pred2,testData$Class)
pred2 <- predict(logis2,testData)
logisDf2 <- data.frame(testData$Class,pred2)
View(logisDf2)
table(pred2,testData$Class)
summary(logis2)
pred2 <- predict(logis2,testData)
logisDf2 <- data.frame(testData$Class,pred2)
View(logisDf2)
logis <- glm(Class~Cell.shape,family ="binomial" , data =trainData)
summary(logis)
pred <- predict(logis,testData)
logisDf <- data.frame(testData$Class,pred)
View(logisDf)
pred <- predict(logis,testData)
logisDf <- data.frame(testData$Class,pred)
View(logisDf)
pred1 <- predict(logis,testData)
logisDf <- data.frame(testData$Class,pred1)
View(logisDf)
pred1 <- predict(logis,testData,type ="raw")
pred1 <- predict(logis,testData)
logisDf <- data.frame(testData$Class,pred1)
View(logisDf)
logis1 <- glm(Class~Cell.shape,family ="binomial" , data =trainData)
summary(logis1)
pred1 <- predict(logis1,testData)
logisDf <- data.frame(testData$Class,pred1)
View(logisDf)
sapply(pred1, function(x) {
if(x<=0.5){
return("benign")
}
else{
return("malignant")
}
})
fun1 <- function(x){
if(x<=0.5){
return("benign")
}
else{
return("malignant")
}
}
pred1 <- predict(logis1,testData)
logisDf <- data.frame(testData$Class,fun1(pred1))
View(logisDf)
pred1 <- predict(logis1,testData)
logisDf <- data.frame(testData$Class,fun1(pred1))
colnames(logisDf) <- c("Actual","Predicted")
View(logisDf)
pred1 <- predict(logis1,testData)
logisDf <- data.frame(testData$Class,pred1)
colnames(logisDf) <- c("Actual","Predicted")
View(logisDf)
fun1 <- function(x){
if(x<=0.5){
return("benign")
}else{
return("malignant")
}
}
pred1 <- predict(logis1,testData)
logisDf <- data.frame(testData$Class,fun1(pred1))
colnames(logisDf) <- c("Actual","Predicted")
View(logisDf)
fun1 <- function(x){
if(x<0.5){
return("benign")
}else{
return("malignant")
}
}
pred1 <- predict(logis1,testData)
logisDf <- data.frame(testData$Class,fun1(pred1))
colnames(logisDf) <- c("Actual","Predicted")
View(logisDf)
fun1 <- function(x){
if(x>0.5){
return("benign")
}else{
return("malignant")
}
}
pred1 <- predict(logis1,testData)
logisDf <- data.frame(testData$Class,fun1(pred1))
colnames(logisDf) <- c("Actual","Predicted")
View(logisDf)
View(fun1(pred1))
pred1 <- predict(logis1,testData)
logisDf <- data.frame(testData$Class,pred1)
colnames(logisDf) <- c("Actual","Predicted")
View(logisDf)
table(pred2,testData$Class)
control <- trainControl("repeatedcv",number = 10, repeats = 3)
metric <- "Accuracy"
logis2 <- train(Class~Cell.shape,data=trainData, method="glm",family="binomial",trControl=control,preProcess=c("center","scale"),tuneLength=5, metric=metric)
summary(logis2)
pred2 <- predict(logis2,testData)
logisDf2 <- data.frame(testData$Class,pred2)
View(logisDf2)
table(pred2,testData$Class)
logis2$metric
a=10
print("Accuracy: ",a )
a=10
paste("Accuracy: ",a )
accuracy <- 123+64/123+10+7+64
paste("Accuracy: ",accuracy )
b <- 123+64/123+10+7+64
b
c <- (123+64)/(123+10+7+64)
c
accuracy <- (123+64)/(123+10+7+64)
paste("Accuracy: ",accuracy )
datase::heart.data
datasets::heart.data
