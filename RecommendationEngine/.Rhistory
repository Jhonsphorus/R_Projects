#Obtain recommendations
recom_result <- matrix(0,10)
for (i in c(1:10)){
#recom_result[i] <- movies2[as.integer(recom_list[[1]][i]),2]
movies2[i,2]
recom_result[i] <- movies2[i,2]
}
recom_result
library(reshape2)
ratings2 <- read.csv("ratings.csv")
movies2 <-  read.csv("movies.csv")
links2 <- read.csv("links.csv")
tags2 <- read.csv("tags.csv")
View(movies2)
View(ratings2)
#View(links2)
#View(tags2)
#Create ratings matrix. Rows = userId, Columns = movieId
ratingmat <- dcast(ratings2, userId~movieId, value.var = "rating", na.rm=FALSE)
#ratingmatrix <- dcast(ratings2,movieId~userId, value.var = "rating", na.rm=FALSE )
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmatrix <- as.matrix(ratingmatrix[,-1])
View(ratingmat)
#View(ratingmatrix)
movies2$title <- as.character(movies2$title)
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "UBCF", param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,10)
for (i in c(1:10)){
#recom_result[i] <- movies2[as.integer(recom_list[[1]][i]),2]
#movies2[i,2]
recom_result[i] <- movies2[i,2]
}
recom_result
library(reshape2)
ratings2 <- read.csv("ratings.csv")
movies2 <-  read.csv("movies.csv")
links2 <- read.csv("links.csv")
tags2 <- read.csv("tags.csv")
View(movies2)
View(ratings2)
#View(links2)
#View(tags2)
#Create ratings matrix. Rows = userId, Columns = movieId
ratingmat <- dcast(ratings2, userId~movieId, value.var = "rating", na.rm=FALSE)
#ratingmatrix <- dcast(ratings2,movieId~userId, value.var = "rating", na.rm=FALSE )
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmatrix <- as.matrix(ratingmatrix[,-1])
View(ratingmat)
#View(ratingmatrix)
movies2$title <- as.character(movies2$title)
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "UBCF", param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- movies2[as.integer(recom_list[[1]][i]),2]
#recom_result[i] <- movies2[i,2]
}
recom_result
library(reshape2)
ratings2 <- read.csv("ratings.csv")
movies2 <-  read.csv("movies.csv")
links2 <- read.csv("links.csv")
tags2 <- read.csv("tags.csv")
View(movies2)
View(ratings2)
#View(links2)
#View(tags2)
#Create ratings matrix. Rows = userId, Columns = movieId
ratingmat <- dcast(ratings2, userId~movieId, value.var = "rating", na.rm=TRUE)
#ratingmatrix <- dcast(ratings2,movieId~userId, value.var = "rating", na.rm=FALSE )
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmatrix <- as.matrix(ratingmatrix[,-1])
View(ratingmat)
#View(ratingmatrix)
movies2$title <- as.character(movies2$title)
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "UBCF", param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- movies2[as.integer(recom_list[[1]][i]),2]
#recom_result[i] <- movies2[i,2]
}
recom_result
anyNA(movies2)
recom_list
#Create ratings matrix. Rows = userId, Columns = movieId
ratingmat <- dcast(ratings2, userId~movieId, value.var = "rating", na.rm=TRUE)
#ratingmatrix <- dcast(ratings2,movieId~userId, value.var = "rating", na.rm=FALSE )
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmatrix <- as.matrix(ratingmatrix[,-1])
View(ratingmat)
#View(ratingmatrix)
#Create ratings matrix. Rows = userId, Columns = movieId
ratingmat <- dcast(ratings2, userId~movieId, value.var = "rating", na.rm=TRUE)
#ratingmatrix <- dcast(ratings2,movieId~userId, value.var = "rating", na.rm=FALSE )
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmatrix <- as.matrix(ratingmatrix[,-1])
View(ratingmat)
View(ratingmatrix)
#Create ratings matrix. Rows = userId, Columns = movieId
ratingmat <- dcast(ratings2, userId~movieId, value.var = "rating", na.rm=TRUE)
#ratingmatrix <- dcast(ratings2,movieId~userId, value.var = "rating", na.rm=FALSE )
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmatrix <- as.matrix(ratingmat[,-1])
View(ratingmat)
View(ratingmatrix)
library(reshape2)
ratings2 <- read.csv("ratings.csv")
movies2 <-  read.csv("movies.csv")
links2 <- read.csv("links.csv")
tags2 <- read.csv("tags.csv")
#View(movies2)
#View(ratings2)
#View(links2)
#View(tags2)
#Create ratings matrix. Rows = userId, Columns = movieId
ratingmat <- dcast(ratings2, userId~movieId, value.var = "rating", na.rm=TRUE)
#ratingmatrix <- dcast(ratings2,movieId~userId, value.var = "rating", na.rm=FALSE )
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmatrix <- ratingmat
View(ratingmat)
View(ratingmatrix)
movies2$title <- as.character(movies2$title)
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "UBCF", param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- movies2[as.integer(recom_list[[1]][i]),2]
#recom_result[i] <- movies2[i,2]
}
recom_result
recom_list
anyNA(ratings2)
movies2$title <- as.character(movies2$title)
recom_result
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "UBCF", param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1:2], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- movies2[as.integer(recom_list[[2]][i]),2]
#recom_result[i] <- movies2[i,2]
}
recom_result
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "UBCF", param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1:2], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,20)
for (i in c(1:20)){
recom_result[i] <- movies2[as.integer(recom_list[[2]][i]),2]
#recom_result[i] <- movies2[i,2]
}
recom_result
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "UBCF", param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1:2], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,20)
for (i in c(1:20)){
recom_result[i] <- movies2[as.integer(recom_list[[1:2]][i]),2]
#recom_result[i] <- movies2[i,2]
}
recom_result
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "POPULAR", param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- movies2[as.integer(recom_list[[1]][i]),2]
#recom_result[i] <- movies2[i,2]
}
recom_result
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "POPULAR")
recom <- predict(recommender_model, ratingmat[1], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- movies2[as.integer(recom_list[[1]][i]),2]
#recom_result[i] <- movies2[i,2]
}
#param=list(method="Cosine",nn=30)
recom_result
data("MovieLense")
MovieLense
MovieLenseMeta
?Recommender
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "UBCF",param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[3], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- movies2[as.integer(recom_list[[1]][i]),2]
}
#param=list(method="Cosine",nn=30)
recom_result
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "UBCF",param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- movies2[as.integer(recom_list[[1]][i]),2]
}
#param=list(method="Cosine",nn=30)
recom_result
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "UBCF",param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[10], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- movies2[as.integer(recom_list[[1]][i]),2]
}
#param=list(method="Cosine",nn=30)
recom_result
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "UBCF",param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[20], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- movies2[as.integer(recom_list[[1]][i]),2]
}
#param=list(method="Cosine",nn=30)
recom_result
library(recommenderlab)
#Convert rating matrix into a recommenderlab sparse matrix
# converting matrix "ratingmat" to"__C__realRatingMatrix" object
ratingmat <- as(ratingmat, "realRatingMatrix")
#Normalize the data
ratingmat_norm <- normalize(ratingmat)
#Create Recommender Model. "UBCF" stands for User-Based Collaborative Filtering
recommender_model <- Recommender(ratingmat_norm, method = "UBCF",param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[200], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
#Obtain recommendations
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- movies2[as.integer(recom_list[[1]][i]),2]
}
#param=list(method="Cosine",nn=30)
recom_result
recom_result
devtools::install_github('rstudio/shinyapps')
getwd()
setwd("~/RProject/Personal_Practice_New/RecommendationEngine/RecommendationApp")
getwd()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
userSelect[row_num] <- 5 #hard code first selection to rating 5
userSelect <- matrix(NA,9724)
userSelect[row_num] <- 3 #hard code first selection to rating 5
movie_recommendation <- function(input,input2,input3) {
row_num <- which(movies2[,2] == input)
row_num2 <- which(movies2[,2] == input2)
row_num3 <- which(movies2[,2] == input3)
userSelect <- matrix(NA,9724)
userSelect[row_num] <- 3 #hard code first selection to rating 5
userSelect[row_num2] <- 4 #hard code second selection to rating 4
userSelect[row_num3] <- 3 #hard code third selection to rating 3
userSelect <- t(userSelect)
ratingmat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
ratingmat <- ratingmat[,-1]
colnames(userSelect) <- colnames(ratingmat)
ratingmat2 <- rbind(userSelect,ratingmat)
ratingmat2 <- as.matrix(ratingmat2)
#Convert rating matrix into a sparse matrix
ratingmat2 <- as(ratingmat2, "realRatingMatrix")
#Create Recommender Model. "UBCF" stands for user-based collaborative filtering
recommender_model <- Recommender(ratingmat2, method = "UBCF",param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat2[1], n=10)
recom_list <- as(recom, "list")
recom_result <- data.frame(matrix(NA,10))
for (i in c(1:10)){
recom_result[i,1] <- movies2[as.integer(recom_list[[1]][i]),2]
}
colnames(recom_result) <- "User-Based Collaborative Filtering Recommended Titles"
return(recom_result)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?t
min1 <- c(1,2,3)
min2 <- c(4,5,6)
min3 <- rbind(min,min2)
min3 <- data.frame(min1,min2)
min3
min4 <- rbind(min3,c(7,8))
min4
runApp()
runApp()
}
userSelect <- matrix(NA,9724) # Creating a matrix of the same number of columns(movies) as we have in movies2
runApp()
runApp()
rownames(recom_result) <- "Vertical"
runApp()
?matrix
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?numericInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
recom_result[i,1] <- movies2[as.integer(recom_list[[1]][i]),3]
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
?matrix
userSelect <- matrix(NA,9724,611) # Creating a matrix of the same number of columns(movies) as we have in movies2
runApp('RecommendationApp')
runApp('RecommendationApp')
recom_result[i,c(1:2)] <- movies2[as.integer(recom_list[[1]][i]),c(2,3)]
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
?numericInput
?read.csv
recom_result[i,c(1:3)] <- movies2[as.integer(recom_list[[1]][i]),c(1:3)]
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
?data.frame
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
userSelect <- matrix(NA,9724,611) # Creating a matrix of the same number of columns(movies) as we have in movies2
runApp('RecommendationApp')
# Creating matrix that will store the recommendation and converting to dataframe (You can omit the NA)
recom_result <- data.frame(matrix(NA,10,4),row.names=c(1:10)) # Creating dataframe to store the predicted values
for (i in c(1:10)){ # Looping through the predicted ratings in order to convert it to movies values
recom_result[i,c(1:4)] <- movies2[as.integer(recom_list[[1]][i]),c(1:3)]
}
runApp('RecommendationApp')
?read.csv
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
ratingmat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
shiny::runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
runApp('RecommendationApp')
rmarkdown::run("PhorusRecommender.Rmd")
getwd()
rmarkdown::run("PhorusRecommender.Rmd")
rmarkdown::run("PhorusRecommender.Rmd")
getwd()
rmarkdown::run("PhorusRecommender.Rmd")
rmarkdown::run("PhorusRecommender.Rmd")
rmarkdown::run("PhorusRecommender.Rmd")
shiny::runApp('RecommendationApp')
userSelect <- matrix(NA,9743,611) # Creating a matrix of the same number of columns(movies) as we have in movies2
runApp('RecommendationApp')
userSelect <- matrix(NA,9742,611) # Creating a matrix of the same number of columns(movies) as we have in movies2
runApp('RecommendationApp')
userSelect <- matrix(NA,9724,611) # Creating a matrix of the same number of columns(movies) as we have in movies2
runApp('RecommendationApp')
userSelect <- matrix(NA,9724) # Creating a matrix of the same number of columns(movies) as we have in movies2
runApp('RecommendationApp')
getwd()
rmarkdown::run("PhorusRec.Rmd")
rmarkdown::run("PhorusRec.Rmd")
rmarkdown::run("PhorusRec.Rmd")
