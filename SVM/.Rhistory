svm_pred <- predict(svm_Linear,testing)
confusionMatrix(svm_pred, testing$target)
#table(svm_pred,testing$target)
df_target <- data.frame(testing$target,svm_pred)
colnames(df_target) <- c("Actual","Predicted")
View(df_target)
# Creating the grid search
grid <- expand.grid(C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
svm_Linear_Grid <- train(V14 ~., data = training, method = "svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid = grid,tuneLength = 10)
svm_Linear_Grid <- train(target ~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid = grid,tuneLength = 10)
svm_Linear_Grid
#plot(svm_Linear_Grid)
# Creating the grid search
grid <- expand.grid(C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid = grid,tuneLength = 10)
svm_Linear_Grid
#plot(svm_Linear_Grid)
suppressWarnings()
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid = grid,tuneLength = 10)
#svm_Linear_Grid
#plot(svm_Linear_Grid)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
library(rsample)
library(caret)
heart <- read.csv("heart.csv", header = T)
View(heart)
anyNA(heart) # Method 1
sapply(heart, function(x) {sum(is.na(x)) }) # method 2
str(heart)
heart$target <- as.factor(heart$target)
str(heart)
set.seed(100)
intrain <- createDataPartition(y=heart$target, p=0.7,list = FALSE)
training <- heart[intrain,]
testing <- heart[-intrain,]
dim(training)
dim(testing)
summary(heart)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svm_Linear <- train(target~.,data = training, trControl=trctrl,method="svmLinear", preProcess=c("center","scale"),tuneLength=10)
svm_Linear
svm_pred <- predict(svm_Linear,testing)
confusionMatrix(svm_pred, testing$target)
#table(svm_pred,testing$target)
df_target <- data.frame(testing$target,svm_pred)
colnames(df_target) <- c("Actual","Predicted")
View(df_target)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid = grid,tuneLength = 10)
#svm_Linear_Grid
#plot(svm_Linear_Grid)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(svm2_pred,testing$target)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
plot(svm_Linear)
set.seed(10)
intrain <- createDataPartition(y=heart$target, p=0.7,list = FALSE)
training <- heart[intrain,]
testing <- heart[-intrain,]
dim(training)
dim(testing)
summary(heart)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svm_Linear <- train(target~.,data = training, trControl=trctrl,method="svmLinear", preProcess=c("center","scale"),tuneLength=10)
svm_Linear
svm_pred <- predict(svm_Linear,testing)
confusionMatrix(svm_pred, testing$target)
#table(svm_pred,testing$target)
df_target <- data.frame(testing$target,svm_pred)
colnames(df_target) <- c("Actual","Predicted")
View(df_target)
# Creating the grid search
grid <- expand.grid(C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
confusionMatrix(table(svm_pred, testing$target))
#table(svm_pred,testing$target)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svm_Linear <- train(target~.,data = training, trControl=trctrl,method="svmLinear", preProcess=c("center","scale"),tuneLength=10)
svm_Linear
svm_Linear <- train(target~.,data = training, trControl=trctrl,method="svmLinear", preProcess=c("center","scale"),tuneLength=10)
svm_Linear
set.seed(1)
intrain <- createDataPartition(y=heart$target, p=0.7,list = FALSE)
training <- heart[intrain,]
testing <- heart[-intrain,]
dim(training)
dim(testing)
summary(heart)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svm_Linear <- train(target~.,data = training, trControl=trctrl,method="svmLinear", preProcess=c("center","scale"),tuneLength=10)
svm_Linear
svm_pred <- predict(svm_Linear,testing)
confusionMatrix(table(svm_pred, testing$target))
#table(svm_pred,testing$target)
df_target <- data.frame(testing$target,svm_pred)
colnames(df_target) <- c("Actual","Predicted")
View(df_target)
# Creating the grid search
grid <- expand.grid(C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
set.seed(100)
intrain <- createDataPartition(y=heart$target, p=0.7,list = FALSE)
training <- heart[intrain,]
testing <- heart[-intrain,]
dim(training)
dim(testing)
summary(heart)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svm_Linear <- train(target~.,data = training, trControl=trctrl,method="svmLinear", preProcess=c("center","scale"),tuneLength=10)
svm_Linear
svm_Linear <- train(target~.,data = training, trControl=trctrl,method="svmLinear", preProcess=c("center","scale"),tuneLength=10)
svm_Linear
set.seed(100)
svm_Linear <- train(target~.,data = training, trControl=trctrl,method="svmLinear", preProcess=c("center","scale"),tuneLength=10)
svm_Linear
set.seed(100)
svm_Linear <- train(target~.,data = training, trControl=trctrl,method="svmLinear", preProcess=c("center","scale"),tuneLength=10)
svm_Linear
set.seed(1)
svm_Linear <- train(target~.,data = training, trControl=trctrl,method="svmLinear", preProcess=c("center","scale"),tuneLength=10)
svm_Linear
svm_pred <- predict(svm_Linear,testing)
confusionMatrix(table(svm_pred, testing$target))
#table(svm_pred,testing$target)
df_target <- data.frame(testing$target,svm_pred)
colnames(df_target) <- c("Actual","Predicted")
View(df_target)
# Creating the grid search
grid <- expand.grid(C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
set.seed(200)
intrain <- createDataPartition(y=heart$target, p=0.7,list = FALSE)
training <- heart[intrain,]
testing <- heart[-intrain,]
summary(heart)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(1)
svm_Linear <- train(target~.,data = training, trControl=trctrl,method="svmLinear", preProcess=c("center","scale"),tuneLength=10)
svm_Linear
svm_pred <- predict(svm_Linear,testing)
confusionMatrix(table(svm_pred, testing$target))
#table(svm_pred,testing$target)
# Creating the grid search
grid <- expand.grid(C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
set.seed(200)
svm_Linear <- train(target~.,data = training, trControl=trctrl,method="svmLinear", preProcess=c("center","scale"),tuneLength=10)
svm_Linear
svm_pred <- predict(svm_Linear,testing)
confusionMatrix(table(svm_pred, testing$target))
#table(svm_pred,testing$target)
# Creating the grid search
grid <- expand.grid(C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
# Creating the grid search
grid <- expand.grid(C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
set.seed(1)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
set.seed(100)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
(31+45)/(31+45+14)
# Creating the grid search
grid <- expand.grid(C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
set.seed(200)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(200)
svm_Linear <- train(target~.,data = training, trControl=trctrl,method="svmLinear", preProcess=c("center","scale"),tuneLength=10)
svm_Linear
confusionMatrix(table(svm_pred, testing$target))
#table(svm_pred,testing$target)
# Creating the grid search
grid <- expand.grid(C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
set.seed(200)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
set.seed(1)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
set.seed(100)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
set.seed(50)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
set.seed(70)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
set.seed(80)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
set.seed(90)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
set.seed(150)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
set.seed(300)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
set.seed(50)
svm_Linear_Grid <- train(target~., data = training, method ="svmLinear",trControl=trctrl,
preProcess = c("center", "scale"),tuneGrid=grid,tuneLength = 10)
svm_Linear_Grid
plot(svm_Linear_Grid)
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
getModelInfo()
names(getModelInfo())
library(e1071)
?svm
svm_Linear$results
svm_Linear$pred
plotObsVsPred(testing$target,svm_pred)
plotObsVsPred(testing,svm_pred)
?plotObsVsPred
plotObsVsPred(svm_Linear,testing[,-target],testing$target)
plotObsVsPred(svm_Linear,testing[,-target],testing[target])
plotObsVsPred(svm_Linear,testing[,-target],testing[,target])
ext <- extractPrediction(svm_Linear,testing[,-target],testing[,target])
ext <- extractPrediction(svm_Linear,testing[-target],testing[target])
ext <- extractPrediction(svm_Linear,testing[-"target"],testing["target"])
testing[target]
testing["target"]
testing[-"target"]
testing[,14]
testing[,c(1:13)]
ext <- extractPrediction(svm_Linear,testing[,c(1:13)],testing[,14])
ext <- extractPrediction(svm_Linear,testing[,c(1:13)])
ext <- extractPrediction(svm_Linear)
both <- list(svm_Linear,svm_Linear_Grid)
ext <- extractPrediction(both,testing[,c(1:13)],testing[,14])
both <- list(svm_Linear,svm_Linear_Grid)
ext <- extractPrediction(both,testing[,c(1:13)],testing[,14])
plotObsVsPred(ext)
#both <- list(svm_Linear,svm_Linear_Grid)
#ext <- extractPrediction(both,testing[,c(1:13)],testing[,14])
#plotObsVsPred(ext)
plot(testing$target,svm_Linear)
#both <- list(svm_Linear,svm_Linear_Grid)
#ext <- extractPrediction(both,testing[,c(1:13)],testing[,14])
#plotObsVsPred(ext)
plot(testing$target,svm_pred)
confusionMatrix(table(svm_pred, testing$target))
#table(svm_pred,testing$target)
plot(testing$target,svm_pred)
plot(svm_pred)
str(svm_pred)
str(testing$target)
str(testing)
points(testing$target,svm_pred)
plot.new(testing$target,svm_pred)
plot(testing$target)
plot(svm_pred)
par(mfrow=c(1,2))
plot(testing$target)
plot(svm_pred)
par(mfrow=c(1,2))
plot(testing$target, main="Actual" )
plot(svm_pred)
par(mfrow=c(1,2))
plot(testing$target, main="Actual" )
plot(svm_pred, main="Predicted")
par(mfrow=c(1,2))
plot(testing$target, main="Actual", col=c("red","green") )
plot(svm_pred, main="Predicted")
par(mfrow=c(1,2))
plot(testing$target, main="Actual", col=c("red","green") )
plot(svm_pred, main="Predicted",col("red","green"))
par(mfrow=c(1,2))
plot(testing$target, main="Actual", col=c("red","green") )
plot(svm_pred, main="Predicted",col=c("red","green"))
svm2_pred <- predict(svm_Linear_Grid,testing)
confusionMatrix(table(svm2_pred,testing$target))
par(mfrow=c(1,2))
plot(testing$target, main="Actual", col=c("red","green") )
plot(svm2_pred, main="Predicted",col=c("red","green"))
library(e1071)
#model <- svm(Y ~ X , data)
#predictedY <- predict(model, data)
#points(data$X, predictedY, col = "red", pch=4)
data("cars")
data("cars")
data <- cars
data("cars")
data <- cars
View(data)
datasets::cars
data("cars")
d1 <- cars
View(d1)
datasets::cars
?cars
cars <- datasets::cars
str(cars)
svr_model <- svm(dist~speed, data=cars)
svr_model <- svm(dist~speed, data=cars)
svr_model
svr_pred <- predict(svr_model,cars)
plot(cars$dist,svr_pred)
points(cars$dist,svr_pred)
points(cars$dist,svr_pred, pch=4)
points(cars$speed,svr_pred, pch=4)
points(cars$speed,svr_pred, pch=4)
points(cars$speed,svr_pred, col="red, pch=4)
points(cars$speed,svr_pred, col="red", pch=4)
points(cars$speed,svr_pred, col="red")
plot(cars$speed,svr_pred, col="red")
plot(cars$speed,cars$dist,col="blue")
plot(cars$speed,svr_pred, col="red")
#plot(cars$speed,cars$dist,col="blue")
plot(cars$speed,cars$dist,svr_pred, col="red")
#plot(cars$speed,cars$dist,col="blue")
scatter.smooth(cars$speed,cars$dist,svr_pred, col="red")
plot(cars$speed,cars$dist,col="blue")+plot(cars$speed,svr_pred, col="red")
#plot(cars$speed,cars$dist,col="blue")
plot(cars$speed,svr_pred, col="red")
#plot(cars$speed,cars$dist,col="blue")
plot(cars$speed~svr_pred, col="red")
#plot(cars$speed,cars$dist,col="blue")
plot(cars$speed~svr_pred+cars$dist, col=c("red","blue"))
#plot(cars$speed,cars$dist,col="blue")
plot(svr_pred+cars$dist,cars$speed, col=c("red","blue"))
#plot(cars$speed,cars$dist,col="blue")
plot(svr_pred+cars$dist,cars$speed, col=c("blue"))
?points
points(cars$speed,svr_pred,col="blue", pch=4)
points(cars$speed,svr_pred,col="blue", pch=4)
points(cars$speed,cars$dist ,col="blue", pch=4)
points(cars$speed,cars$dist ,col="blue", pch=4, type = "p")
points(cars$speed,cars$dist ,col="blue", pch=4)
library(e1071)
#model <- svm(Y ~ X , data)
#predictedY <- predict(model, data)
#points(data$X, predictedY, col = "red", pch=4)
cars <- datasets::cars
# It is optional to specify that it is regression that you want the model to run.
svr_model <- svm(dist~speed, data=cars)
svr_model
svr_pred <- predict(svr_model,cars)
points(cars$speed,cars$dist ,col="blue", pch=4)
library(e1071)
#model <- svm(Y ~ X , data)
#predictedY <- predict(model, data)
#points(data$X, predictedY, col = "red", pch=4)
cars <- datasets::cars
# It is optional to specify that it is regression that you want the model to run.
svr_model <- svm(dist~speed, data=cars)
svr_model
svr_pred <- predict(svr_model,cars)
#points()
points(cars$speed,cars$dist ,col="blue", pch=4)
#points()
points(cars$speed,svr_pred,col="blue", pch=4)
svr_df <- data.frame(cars$dist,svr_pred)
svr_df <- data.frame(cars$dist,svr_pred)
View(svr_df)
svr_df <- data.frame(cars$dist,svr_pred)
colnames(svr_df) <- c("Actual_Distsance","Predicted_Destance")
View(svr_df)
library(rsample)
library(caret)
library(rsample)
library(caret)
heart <- read.csv("heart.csv", header = T)
View(heart)
data("iris")
#a = iris
#a
iris
library(ggplot2)
ggplot(iris,aes(iris$Petal.Length, iris$Sepal.Length))+geom_point(color="green")+labs(x="Petal Length",y="Sepal Length",title="Sepal Length Vs Petal Length")+theme_dark()
m1<-lm(Sepal.Length~Petal.Length, data = iris)
summary(m1)
lm1 = lm(iris$Sepal.Length~iris$Petal.Length)
summary(lm1)
(lm1$coefficients)
#par(mfrow=c(1,2)) # two plots on a row
par(mfrow=c(2,2)) # two plots on a row, with two rows
plot(m1)
#attach(hs) ## Remove the use of $ sign when callin variables
m2 = lm(Price~Bedrooms+Bathrooms+SQFT+Status, data=hs)
Age = c(30,41,42,43,31)
Weight = c(60,67,81,54,69)
dt = data.frame(Age,Weight)
dt
m1 = lm(Age~Weight,dt)
summary(m1)
par(mfrow=c(2,2))
plot(m1)
plot(dt$Age~dt$Weight)
data("iris")
iris
dt1 = data.frame(iris$Sepal.Length,iris$Petal.Length)
#dt1
lm1 = lm(Sepal.Length~Petal.Length, data = iris)
summary(lm1)
par(mfrow =c(2,2) )
plot(lm1)
hist(lm1$residuals)
## How to remove outliers
#dt[-c(3,4)] # removing row 3,4
lm2 = lm(Sepal.Length~Petal.Length, data=iris[-c(15,107,132,128,13,6),])
summary(lm2)
getwd()
ls()
search()
cars <- datasets::cars
# It is optional to specify that it is regression that you want the model to run.
svr_model <- svm(dist~speed, data=cars)
library(e1071)
#model <- svm(Y ~ X , data)
#predictedY <- predict(model, data)
#points(data$X, predictedY, col = "red", pch=4)
library(e1071)
#model <- svm(Y ~ X , data)
#predictedY <- predict(model, data)
#points(data$X, predictedY, col = "red", pch=4)
cars <- datasets::cars
# It is optional to specify that it is regression that you want the model to run.
svr_model <- svm(dist~speed, data=cars)
svr_model
svr_pred <- predict(svr_model,cars)
svr_df <- data.frame(cars$dist,svr_pred)
colnames(svr_df) <- c("Actual_Distsance","Predicted_Destance")
View(svr_df)
