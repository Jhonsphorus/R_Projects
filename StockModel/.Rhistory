stocks_dividend_yield <- stocks$dividend_yield
stocks_open_now[is.na(stocks_open_now)] <- stocks$open[is.na(stocks_open_now)]/2
stocks_dividend_yield[is.na(stocks_dividend_yield)] <- 0
stocks_dividend_yield <- stocks$dividend_yield/100
stocks_dividend_performance <- (stocks$dividend_yield*stocks$open)/4
stocks_performance <- (stocks_open_now - stocks$open) + stocks_dividend_performance
stocks_performance_percent <- stocks$performance/ stocks$open
stocks_company_age <- as.numeric(format(Sys.Date(),'%Y')) - stocks$year_founded
td <- quantile(stocks$performance_percent, .90)
tq <- quantile(stocks$performance_percent, .75)
stocks <- stocks[stocks$performance_percent <= td,]
stocks$Buy <- 'No'
td <- quantile(stocks_performance_percent, .90)
tq <- quantile(stocks_performance_percent, .75)
stocks <- stocks[stocks_performance_percent <= td,]
stocks$Buy <- 'No'
str(stocks)
td <- quantile(stocks_performance_percent, .90)
tq <- quantile(stocks_performance_percent, .75)
stocks <- stocks[stocks_performance_percent <= td,]
stocks$Buy <- 'No'
td <- quantile(stocks_performance_percent, .90)
tq <- quantile(stocks_performance_percent, .75)
stocks <- stocks[stocks_performance_percent <= td,]
stocks <- data.frame(stocks$open,stocks$dividend_yield)
#stocks$Buy <- 'No'
#stocks$Buy[stocks$performance_percent >= tq] <- 'Yes'
#stocks$Buy <- factor(stocks$Buy, levels = c('No','Yes'))
library(RSQLite)
library(knitr)
library(tidyverse)
connector1 <- dbConnect(SQLite(), dbname = "stock_model.sqlite")
db <- dbConnect(RSQLite::SQLite(), dbname = "stock_portfolio.sqlite")
table1 = dbListTables(connector1)
table2 <- dbListTables(db)
table1
#View(table2)
industry_major <- dbReadTable(connector1, "industry_major")
industry_market_capitization <- dbReadTable(connector1, "industry_market_capitization")
stocks <- dbReadTable(connector1, "us_stock")
stock_price_history <- dbReadTable(connector1, "stock_price_history")
View(industry_major)
View(industry_market_capitization)
View(us_stock)
View(stock_price_history)
sapply(stocks, function(x) sum(is.na(x)))
stocks_open_now <- stocks$open
stocks_dividend_yield <- stocks$dividend_yield
stocks_open_now[is.na(stocks_open_now)] <- stocks$open[is.na(stocks_open_now)]/2
stocks_dividend_yield[is.na(stocks_dividend_yield)] <- 0
stocks_dividend_yield <- stocks$dividend_yield/100
stocks_dividend_performance <- (stocks$dividend_yield*stocks$open)/4
stocks_performance <- (stocks_open_now - stocks$open) + stocks_dividend_performance
stocks_performance_percent <- stocks$performance/ stocks$open
stocks_company_age <- as.numeric(format(Sys.Date(),'%Y')) - stocks$year_founded
td <- quantile(stocks_performance_percent, .90)
tq <- quantile(stocks_performance_percent, .75)
stocks <- stocks[stocks_performance_percent <= td,]
stocks <- data.frame(stocks$open,stocks$dividend_yield,stocks$market_cap,stocks_company_age)
stocks$open_now <- stocks$open
stocks$dividend_yield <- stocks$dividend_yield
stocks$open_now[is.na(stocks$open_now)] <- stocks$open[is.na(stocks$open_now)]/2
stocks$dividend_yield[is.na(stocks$dividend_yield)] <- 0
stocks$dividend_yield <- stocks$dividend_yield/100
stocks$dividend_performance <- (stocks$dividend_yield*stocks$open)/4
stocks$performance <- (stocks$open_now - stocks$open) + stocks$dividend_performance
stocks$performance_percent <- stocks$performance/ stocks$open
stocks$company_age <- as.numeric(format(Sys.Date(),'%Y')) - stocks$year_founded
str(stocks)
td <- quantile(stocks$performance_percent, .90)
tq <- quantile(stocks$performance_percent, .75)
stocks <- stocks[stocks$performance_percent <= td,]
View(stocks)
#stocks$Buy <- 'No'
#stocks$Buy[stocks$performance_percent >= tq] <- 'Yes'
#stocks$Buy <- factor(stocks$Buy, levels = c('No','Yes'))
library(RSQLite)
library(knitr)
library(tidyverse)
connector1 <- dbConnect(SQLite(), dbname = "stock_model.sqlite")
db <- dbConnect(RSQLite::SQLite(), dbname = "stock_portfolio.sqlite")
table1 = dbListTables(connector1)
table2 <- dbListTables(db)
table1
#View(table2)
industry_major <- dbReadTable(connector1, "industry_major")
industry_market_capitization <- dbReadTable(connector1, "industry_market_capitization")
stocks <- dbReadTable(connector1, "us_stock")
stock_price_history <- dbReadTable(connector1, "stock_price_history")
View(industry_major)
View(industry_market_capitization)
View(us_stock)
View(stock_price_history)
library(RSQLite)
library(knitr)
library(tidyverse)
connector1 <- dbConnect(SQLite(), dbname = "stock_model.sqlite")
db <- dbConnect(RSQLite::SQLite(), dbname = "stock_portfolio.sqlite")
table1 = dbListTables(connector1)
table2 <- dbListTables(db)
table1
#View(table2)
industry_major <- dbReadTable(connector1, "industry_major")
industry_market_capitization <- dbReadTable(connector1, "industry_market_capitization")
stocks <- dbReadTable(connector1, "us_stock")
stock_price_history <- dbReadTable(connector1, "stock_price_history")
View(industry_major)
View(industry_market_capitization)
View(us_stock)
View(stock_price_history)
sapply(stocks, function(x) sum(is.na(x)))
stocks$open_now <- stocks$open
stocks$dividend_yield <- stocks$dividend_yield
stocks$open_now[is.na(stocks$open_now)] <- stocks$open[is.na(stocks$open_now)]/2
stocks$dividend_yield[is.na(stocks$dividend_yield)] <- 0
stocks$dividend_yield <- stocks$dividend_yield/100
stocks$dividend_performance <- (stocks$dividend_yield*stocks$open)/4
stocks$performance <- (stocks$open_now - stocks$open) + stocks$dividend_performance
stocks$performance_percent <- stocks$performance/ stocks$open
stocks$company_age <- as.numeric(format(Sys.Date(),'%Y')) - stocks$year_founded
View(stocks)
td <- quantile(stocks$performance_percent, .90)
td <- quantile(stocks$performance_percent, .90)
sapply(stocks, function(x) sum(is.na(x)))
library(RSQLite)
library(knitr)
library(tidyverse)
library(na.tools)
library(RSQLite)
library(knitr)
library(tidyverse)
library(na.tools)
connector1 <- dbConnect(SQLite(), dbname = "stock_model.sqlite")
db <- dbConnect(RSQLite::SQLite(), dbname = "stock_portfolio.sqlite")
table1 = dbListTables(connector1)
table2 <- dbListTables(db)
table1
#View(table2)
industry_major <- dbReadTable(connector1, "industry_major")
industry_market_capitization <- dbReadTable(connector1, "industry_market_capitization")
stocks <- dbReadTable(connector1, "us_stock")
stock_price_history <- dbReadTable(connector1, "stock_price_history")
View(industry_major)
View(industry_market_capitization)
View(us_stock)
View(stock_price_history)
sapply(stocks, function(x) sum(is.na(x)))
str(stocks)
sapply(stocks, function(x) sum(is.na(x)))
stocks$open_now <- stocks$open
stocks$dividend_yield <- stocks$dividend_yield
stocks$open_now[is.na(stocks$open_now)] <- stocks$open[is.na(stocks$open_now)]/2
stocks$dividend_yield[is.na(stocks$dividend_yield)] <- 0
stocks$dividend_yield <- stocks$dividend_yield/100
stocks$dividend_performance <- (stocks$dividend_yield*stocks$open)/4
stocks$performance <- (stocks$open_now - stocks$open) + stocks$dividend_performance
stocks$performance_percent <- stocks$performance/ stocks$open
stocks$company_age <- as.numeric(format(Sys.Date(),'%Y')) - stocks$year_founded
View(stocks)
str(stocks)
sapply(stocks, function(x) sum(is.na(x)))
td <- quantile(stocks$performance_percent, .90)
stocks$performance_percent <- na.replace(0)
td <- quantile(stocks$performance_percent, .90)
tq <- quantile(stocks$performance_percent, .75)
#stocks <- stocks[stocks$performance_percent <= td,]
View(stocks)
stocks$Buy <- 'No'
stocks$Buy[stocks$performance_percent >= tq] <- 'Yes'
stocks$Buy <- factor(stocks$Buy, levels = c('No','Yes'))
td <- quantile(stocks$performance_percent, .90)
tq <- quantile(stocks$performance_percent, .75)
stocks <- stocks[stocks$performance_percent <= td,]
View(stocks)
stocks$Buy <- 'No'
stocks$Buy[stocks$performance_percent >= tq] <- 'Yes'
stocks$Buy <- factor(stocks$Buy, levels = c('No','Yes'))
View(stocks)
library(RSQLite)
library(knitr)
library(tidyverse)
library(na.tools)
connector1 <- dbConnect(SQLite(), dbname = "stock_model.sqlite")
db <- dbConnect(RSQLite::SQLite(), dbname = "stock_portfolio.sqlite")
table1 = dbListTables(connector1)
table2 <- dbListTables(db)
table1
#View(table2)
industry_major <- dbReadTable(connector1, "industry_major")
industry_market_capitization <- dbReadTable(connector1, "industry_market_capitization")
stocks <- dbReadTable(connector1, "us_stock")
stock_price_history <- dbReadTable(connector1, "stock_price_history")
View(industry_major)
View(industry_market_capitization)
View(us_stock)
View(stock_price_history)
sapply(stocks, function(x) sum(is.na(x)))
stocks$open_now <- stocks$open
stocks$dividend_yield <- stocks$dividend_yield
stocks$open_now[is.na(stocks$open_now)] <- stocks$open[is.na(stocks$open_now)]/2
stocks$dividend_yield[is.na(stocks$dividend_yield)] <- 0
stocks$dividend_yield <- stocks$dividend_yield/100
stocks$dividend_performance <- (stocks$dividend_yield*stocks$open)/4
stocks$performance <- (stocks$open_now - stocks$open) + stocks$dividend_performance
stocks$performance_percent <- stocks$performance/ stocks$open
stocks$company_age <- as.numeric(format(Sys.Date(),'%Y')) - stocks$year_founded
View(stocks)
str(stocks)
sapply(stocks, function(x) sum(is.na(x)))
?na.rm
na.rm(stocks$performance_percent)
sapply(stocks, function(x) sum(is.na(x)))
stocks$performance_percent <- na.rm(stocks$performance_percent)
library(RSQLite)
library(knitr)
library(tidyverse)
library(na.tools)
connector1 <- dbConnect(SQLite(), dbname = "stock_model.sqlite")
db <- dbConnect(RSQLite::SQLite(), dbname = "stock_portfolio.sqlite")
table1 = dbListTables(connector1)
table2 <- dbListTables(db)
table1
#View(table2)
industry_major <- dbReadTable(connector1, "industry_major")
industry_market_capitization <- dbReadTable(connector1, "industry_market_capitization")
stocks <- dbReadTable(connector1, "us_stock")
stock_price_history <- dbReadTable(connector1, "stock_price_history")
View(industry_major)
View(industry_market_capitization)
View(us_stock)
View(stock_price_history)
sapply(stocks, function(x) sum(is.na(x)))
stocks$open_now <- stocks$open
stocks$dividend_yield <- stocks$dividend_yield
stocks$open_now[is.na(stocks$open_now)] <- stocks$open[is.na(stocks$open_now)]/2
stocks$dividend_yield[is.na(stocks$dividend_yield)] <- 0
stocks$dividend_yield <- stocks$dividend_yield/100
stocks$dividend_performance <- (stocks$dividend_yield*stocks$open)/4
stocks$performance <- (stocks$open_now - stocks$open) + stocks$dividend_performance
stocks$performance_percent <- stocks$performance/ stocks$open
stocks$company_age <- as.numeric(format(Sys.Date(),'%Y')) - stocks$year_founded
View(stocks)
str(stocks)
sapply(stocks, function(x) sum(is.na(x)))
na.replace(stocks$performance_percent, 0)
sapply(stocks, function(x) sum(is.na(x)))
?na.replace
x <- c(1,2,3,NA,6,7)
na.replace(x,5)
na.mean(x)
na.rm(x)
x
na.rm(x)
na.mean(x)
x
x
x=na.mean(x)
x
x=na.replace(x, 10)
x
x <- c(1,2,3,NA,6,7)
x=na.replace(x, 10)
x
stocks$performance_percent <- na.rm(stocks$performance_percent, 0)
stocks <- na.rm(stocks$performance_percent, 0)
sapply(stocks, function(x) sum(is.na(x)))
sapply(stocks, function(x) sum(is.na(x)))
View(stocks)
library(RSQLite)
library(knitr)
library(tidyverse)
connector1 <- dbConnect(SQLite(), dbname = "stock_model.sqlite")
db <- dbConnect(RSQLite::SQLite(), dbname = "stock_portfolio.sqlite")
table1 = dbListTables(connector1)
table2 <- dbListTables(db)
table1
#View(table2)
industry_major <- dbReadTable(connector1, "industry_major")
industry_market_capitization <- dbReadTable(connector1, "industry_market_capitization")
stocks <- dbReadTable(connector1, "us_stock")
stock_price_history <- dbReadTable(connector1, "stock_price_history")
View(industry_major)
View(industry_market_capitization)
View(us_stock)
View(stock_price_history)
sapply(stocks, function(x) sum(is.na(x)))
stocks$open_now <- stocks$open
stocks$dividend_yield <- stocks$dividend_yield
stocks$open_now[is.na(stocks$open_now)] <- stocks$open[is.na(stocks$open_now)]/2
stocks$dividend_yield[is.na(stocks$dividend_yield)] <- 0
stocks$dividend_yield <- stocks$dividend_yield/100
stocks$dividend_performance <- (stocks$dividend_yield*stocks$open)/4
stocks$performance <- (stocks$open_now - stocks$open) + stocks$dividend_performance
stocks$performance_percent <- stocks$performance/ stocks$open
stocks$company_age <- as.numeric(format(Sys.Date(),'%Y')) - stocks$year_founded
View(stocks)
str(stocks)
sapply(stocks, function(x) sum(is.na(x)))
x <- c(1,2,3,NA,6,7)
y <- c(10,20,30,40,NA)
z <- data.frame(x,y)
x <- c(1,2,3,NA,6,7)
y <- c(10,20,30,40,NA,100)
z <- data.frame(x,y)
x <- c(1,2,3,NA,6,7)
y <- c(10,20,30,40,NA,100)
z <- data.frame(x,y)
z
x=na.replace(x, 10)
z$x =na.replace(z$x, 10)
z
is.na(z)
sapply(z, function(x) sum(is.na(x)))
x <- c(1,2,3,NA,6,7)
y <- c(10,20,30,40,NA,100)
z <- data.frame(x,y)
z
z =na.rm(z)
z
x <- c(1,2,3,NA,6,7)
y <- c(10,20,30,40,NA,100)
z <- data.frame(x,y)
z
z =na.rm(z$x)
z
sapply(z, function(x) sum(is.na(x)))
library(RSQLite)
library(knitr)
library(tidyverse)
library(na.tools)
library(RSQLite)
library(knitr)
library(tidyverse)
library(na.tools)
library(RSQLite)
library(knitr)
library(tidyverse)
library(na.tools)
library(RSQLite)
library(knitr)
library(tidyverse)
library(na.tools)
library(RSQLite)
#library(knitr)
library(tidyverse)
library(na.tools)
library(RSQLite)
#library(knitr)
library(tidyverse)
library(na.tools)
connector1 <- dbConnect(SQLite(), dbname = "stock_model.sqlite")
db <- dbConnect(RSQLite::SQLite(), dbname = "stock_portfolio.sqlite")
library(RSQLite)
library(tidyverse)
library(na.tools)
library(RSQLite)
library(tidyverse)
library(na.tools)
library(RSQLite)
library(tidyverse)
library(na.tools)
sapply(stocks, function(x) sum(is.na(x)))
library(RSQLite)
library(tidyverse)
library(na.tools)
connector1 <- dbConnect(SQLite(), dbname = "stock_model.sqlite")
db <- dbConnect(RSQLite::SQLite(), dbname = "stock_portfolio.sqlite")
library(RSQLite)
library(knitr)
library(tidyverse)
library(na.tools)
connector1 <- dbConnect(SQLite(), dbname = "stock_model.sqlite")
db <- dbConnect(RSQLite::SQLite(), dbname = "stock_portfolio.sqlite")
table1 = dbListTables(connector1)
table2 <- dbListTables(db)
table1
#View(table2)
library(RSQLite)
library(knitr)
library(tidyverse)
library(na.tools)
connector1 <- dbConnect(SQLite(), dbname = "stock_model.sqlite")
db <- dbConnect(RSQLite::SQLite(), dbname = "stock_portfolio.sqlite")
table1 = dbListTables(connector1)
table2 <- dbListTables(db)
table1
#View(table2)
industry_major <- dbReadTable(connector1, "industry_major")
industry_market_capitization <- dbReadTable(connector1, "industry_market_capitization")
stocks <- dbReadTable(connector1, "us_stock")
stock_price_history <- dbReadTable(connector1, "stock_price_history")
View(industry_major)
View(industry_market_capitization)
View(us_stock)
View(stock_price_history)
sapply(stocks, function(x) sum(is.na(x)))
stocks$pe_ratio[is.na(stocks$pe_ratio)] <- 0
stocks$open_now <- stocks$open
stocks$dividend_yield <- stocks$dividend_yield
stocks$open_now[is.na(stocks$open_now)] <- stocks$open[is.na(stocks$open_now)]/2
stocks$dividend_yield[is.na(stocks$dividend_yield)] <- 0
stocks$dividend_yield <- stocks$dividend_yield/100
stocks$dividend_performance <- (stocks$dividend_yield*stocks$open)/4
stocks$performance <- (stocks$open_now - stocks$open) + stocks$dividend_performance
stocks$performance_percent <- stocks$performance/ stocks$open
stocks$company_age <- as.numeric(format(Sys.Date(),'%Y')) - stocks$year_founded
sapply(stocks, function(x) sum(is.na(x)))
stocks <- na.rm(stocks)
str(stocks)
sapply(stocks, function(x) sum(is.na(x)))
sapply(stocks, function(x) sum(is.na(x)))
View(stocks)
td <- quantile(stocks$performance_percent, .90)
tq <- quantile(stocks$performance_percent, .75)
stocks <- stocks[stocks$performance_percent <= td,]
#View(stocks)
stocks$Buy <- 'No'
stocks$Buy[stocks$performance_percent >= tq] <- 'Yes'
stocks$Buy <- factor(stocks$Buy, levels = c('No','Yes'))
View(stocks)
library(rsample)
train_test <- initial_split(stocks, prop = 0.8)
library(rsample)
train_test <- initial_split(stocks, prop = 0.8)
library(rsample)
train_test <- initial_split(stocks, prop = 0.8)
train_test
trainDt <- training(train_test)
testDT <- testing(train_test)
library(caret)
library(rsample)
train_test <- initial_split(stocks, prop = 0.8)
train_test
library(caret)
library(rsample)
train_test <- initial_split(stocks, prop = 0.8)
train_test
trainDt <- training(train_test)
testDT <- testing(train_test)
?train
library(caret)
library(rsample)
set.seed(100)
train_test <- initial_split(stocks, prop = 0.8)
train_test
trainDt <- training(train_test)
testDT <- testing(train_test)
control <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
tree_model <- train(Buy~dividend_yield + pe_ratio + company_age + market_cap, data = trainDt,method="rf",trControl=control,preProcess=c("center","scale"))
pred <- predict(tree_model,testDT)
pred <- predict(tree_model,testDT)
confusionMatrix(pred, stocks$Buy)
pred <- predict(tree_model,testDT)
confusionMatrix(pred,testDT$Buy)
result <- data.frame(testDT$Buy,pred)
colnames(result) <- c("Actual_Buy","Predicted_Buy")
View(result)
rf_model <- train(Buy~dividend_yield + pe_ratio + company_age + market_cap, data = trainDt,method="rf",trControl=control,preProcess=c("center","scale"))
tree_model <- train(Buy~dividend_yield + pe_ratio + company_age + market_cap, data = trainDt,method="rf",trControl=control,preProcess=c("center","scale"))
pred <- predict(rf_model,testDT)
confusionMatrix(pred,testDT$Buy)
pred2 <- predict(tree_model,testDT)
confusionMatrix(pred2,testDT$Buy)
library(ggplot2)
library(MASS)
#ggplot(dmd, aes(x = carat, y = price,colour=cut))+geom_point()
ggplot(dmd, aes(carat, price,colour=color))+geom_point()
car1 = MASS::Cars93
#car1
dmd<-read.table("Data/diamond.csv", header = TRUE,dec = ".", sep = ",")
#head(dmd)[,1:5]
View(dmd)
dmd<-read.table("Data/diamond.csv", header = TRUE,dec = ".", sep = ",")
#head(dmd)[,1:5]
View(dmd)
ggplot(dmd, aes(x=carat,y=price))+geom_point()
ggplot(dmd, aes(x=carat,y=price)) + geom_point()
ggplot(dmd, aes(x = carat, y = price))+geom_point(colour="green")
#ggplot(dmd, aes(x = carat, y = price,colour=cut))+geom_point()
ggplot(dmd, aes(carat, price,colour=color))+geom_point()
v <- c(1,4,80,20)
q <- c(4,10,5,7)
p <- data.frame(v,q)
v <- c(1,4,80,20)
q <- c(4,10,5,7)
p <- data.frame(v,q)
p
v <- c(1,4,80,20)
q <- c(4,10,5,7)
p <- data.frame(v,q)
colnames(p) <- c("col1","col2")
p
p$col3 <- "No"
p
str(p)
v <- c(1,4,80,20)
q <- c(4,10,5,7)
p <- data.frame(v,q)
colnames(p) <- c("col1","col2")
p$col3 <- "No"
p$col3[p$col1<p$col2] <- "Yes"
p$col3 <- "No"
p$col3[p$col1<p$col2] <- "Yes"
p
p$col3 <- "No"
p$col3[p$col1<p$col2] <- "Yes"
p$col3 <- as.factor(p$col3)
p
str(p)
search()
ls
ls()
